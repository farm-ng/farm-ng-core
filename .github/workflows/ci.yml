name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            compiler: gcc
          - os: ubuntu-20.04
            compiler: clang
          - os: macos-11
            compiler: clang
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: "recursive"

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1

    - name: install deps (linux)
      run: |
        sudo apt-get install clang-tidy-10 libprotobuf-dev protobuf-compiler -y
      if: matrix.os == 'ubuntu-20.04'

    - name: install deps (mac-os)
      run: |
        brew install --verbose protobuf grpc
      if: matrix.os == 'macos-11'


    - name: Configure And Build Tests (gcc)
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{github.workspace}}/super_project
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose
      if: matrix.compiler == 'gcc'

    - name: Configure And Build Tests (clang)
      run: |
        CC=clang CXX=clang++ cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{github.workspace}}/super_project
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose
      if: matrix.compiler == 'clang'

    - name: clang-tidy
      run: |
        ./run_clang_tidy.sh
      if: matrix.os == 'ubuntu-20.04' && matrix.compiler == 'clang'
