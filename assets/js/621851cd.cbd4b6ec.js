"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[367],{5680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>g});var t=r(6540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=t.createContext({}),s=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(r),y=o,g=m["".concat(p,".").concat(y)]||m[y]||d[y]||a;return r?t.createElement(g,i(i({ref:n},c),{},{components:r})):t.createElement(g,i({ref:n},c))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=y;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},8732:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var t=r(8168),o=(r(6540),r(5680));const a={sidebar_position:1},i="Pose and Frame Conventions",l={unversionedId:"Developer Guide/poses_and_frames",id:"Developer Guide/poses_and_frames",title:"Pose and Frame Conventions",description:"Rigid body transform and points convention",source:"@site/docs/Developer Guide/poses_and_frames.md",sourceDirName:"Developer Guide",slug:"/Developer Guide/poses_and_frames",permalink:"/farm-ng-core/docs/Developer Guide/poses_and_frames",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Contributor Guide",permalink:"/farm-ng-core/docs/category/contributor-guide"},next:{title:"C++ Style Guide",permalink:"/farm-ng-core/docs/Developer Guide/style-guide"}},p={},s=[{value:"Rigid body transform and points convention",id:"rigid-body-transform-and-points-convention",level:2},{value:"Some details",id:"some-details",level:3},{value:"Velocity, acceleration convention",id:"velocity-acceleration-convention",level:2}],c={toc:s},m="wrapper";function d(e){let{components:n,...r}=e;return(0,o.yg)(m,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"pose-and-frame-conventions"},"Pose and Frame Conventions"),(0,o.yg)("h2",{id:"rigid-body-transform-and-points-convention"},"Rigid body transform and points convention"),(0,o.yg)("p",null,"Given a point in frame ",(0,o.yg)("inlineCode",{parentName:"p"},"foo"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"bar_from_foo")," is the rigid body\ntransform which maps the point to frame ",(0,o.yg)("inlineCode",{parentName:"p"},"bar"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"    point_in_bar = bar_from_foo * point_in_foo\n")),(0,o.yg)("p",null,"Note that the frame names line up: ",(0,o.yg)("inlineCode",{parentName:"p"},"bar")," - ",(0,o.yg)("inlineCode",{parentName:"p"},"bar"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"foo")," - ",(0,o.yg)("inlineCode",{parentName:"p"},"foo"),"."),(0,o.yg)("h3",{id:"some-details"},"Some details"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If necessary to resolved ambiguities, e.g. between rotations and rigid\nbody transforms, we use a corresponding notation, e.g.\n",(0,o.yg)("inlineCode",{parentName:"p"},"bar_form_foo_rotation"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"bar_form_foo_se3s")," etc.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If we have a list (or vector, or map) of transforms we write:, e.g.:"),(0,o.yg)("p",{parentName:"li"},"   bar_from_foo_rotations")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Transforms with compound frame names, such as ",(0,o.yg)("inlineCode",{parentName:"p"},"robot_base")," or\n",(0,o.yg)("inlineCode",{parentName:"p"},"left_camera"),", are written as follows::"),(0,o.yg)("p",{parentName:"li"},"   robot_base_from_left_camera")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"For functions and methods we use ",(0,o.yg)("inlineCode",{parentName:"p"},"camelCase"),". Examples::"),(0,o.yg)("p",{parentName:"li"},"   this->calcRobotBaseFromLeftCamera();"),(0,o.yg)("p",{parentName:"li"},"   other->setBarFromFoo(bar_from_foo);")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"We use the ",(0,o.yg)("inlineCode",{parentName:"p"},"entity_in_frame")," conventions for points and other entities\nwhich have one frame attached to it. Examples:"),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"point_in_camera")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"circle_in_image")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"camera_position_in_world")," (or short ",(0,o.yg)("inlineCode",{parentName:"li"},"camera_in_world"),")"),(0,o.yg)("li",{parentName:"ul"},"..."))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"When storing transforms / using them in interfaces, prefer the\n",(0,o.yg)("inlineCode",{parentName:"p"},"parent_from_child")," convention."),(0,o.yg)("p",{parentName:"li"},"E.g. ",(0,o.yg)("inlineCode",{parentName:"p"},"world_from_sensor_rig"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"sensor_rig_from_camera"),",\n",(0,o.yg)("inlineCode",{parentName:"p"},"robot_from_imu")," (and not ",(0,o.yg)("inlineCode",{parentName:"p"},"sensor_rig_from_world")," etc.)."),(0,o.yg)("p",{parentName:"li"},"It is easier to reason about the pose of camera in the world frame, then\nthe pose of the world origin in the camera frame."))),(0,o.yg)("h2",{id:"velocity-acceleration-convention"},"Velocity, acceleration convention"),(0,o.yg)("p",null,"This section includes convention for entities which require three frames such\nas velocities, and accelerations. We will focus the discussion on velocities,\nbut the same conventions apply to accelerations and similar entities similarly."),(0,o.yg)("p",null,"For velocities, the three frame of interest are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"the ",(0,o.yg)("strong",{parentName:"li"},"anchor frame")," we compare the motion to"),(0,o.yg)("li",{parentName:"ul"},"the frame of the ",(0,o.yg)("strong",{parentName:"li"},"entity")," in motion"),(0,o.yg)("li",{parentName:"ul"},"the ",(0,o.yg)("strong",{parentName:"li"},"frame of origin")," in which the velocity is expressed")),(0,o.yg)("p",null,"Let ",(0,o.yg)("inlineCode",{parentName:"p"},"foo")," by the anchor frame, ",(0,o.yg)("inlineCode",{parentName:"p"},"entity")," the frame on the body in motion\nand ",(0,o.yg)("inlineCode",{parentName:"p"},"origin")," the origin frame.\nThen we write:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"foo_anchored_entity_velocity_in_origin\n")),(0,o.yg)("p",null,"Let first give a few examples to illustrate velocities of rigid bodies in\ngeneral, why we need three frames to annotate velocities, and what the\ndifference between is between the anchor frame and the origin is:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"world_anchored_robot_velocity_in_robot"),": Ego-centric velocity of the robot\nwith respect to the world frame, expressed in the robot frame. For 2d\nisometries, the velocity or tangent vector is a 3-vector (vx, vy, w),\nwhich consists of linear velocity (vx, vy) - i.e. forward and sideway and\nangular rate (w). For 3d rigid body transforms, the velocity vector is a\n6-vector (vx, vy, vz, wx, wy, wz), which consists of linear velocity (vx,\nvy, vz) and angular rate (wx, wy, wz).")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"world_anchored_robot_velocity_in_world"),": Velocity of the\nrobot with respect to the world frame, expressed in the world frame. Here,\nthe velocities (such as the linear vx, vy) are not ego-centric\n(forward, sideways) but world-centric (e.g. North-South, East-West).")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"car1_anchored_car2_velocity_in_track"),": Relative velocity of car2 with\nrespect to car1, expressed in the race track frame."))),(0,o.yg)("p",null,"It is cumbersome, to always annotate velocities with three frames. If it is\nclear from context what"),(0,o.yg)("p",null,"  (a) the anchor frame (e.g. the world frame) and the\n(b) entity in motion is (e.g. the robot),"),(0,o.yg)("p",null,"we use the following conventions which only annotate the origin frame:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"velocity_in_bar\n")),(0,o.yg)("p",null,"which is short for ",(0,o.yg)("inlineCode",{parentName:"p"},"world_anchored_robot_velocity_in_bar"),". In particular,\nwe write:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"velocity_in_world\n")),(0,o.yg)("p",null,"for the world-centric velocity ",(0,o.yg)("inlineCode",{parentName:"p"},"world_anchored_robot_velocity_in_world "),"\n(robot is moving WEST with a speed of 5 mps), and"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"velocity_in_robot\n")),(0,o.yg)("p",null,"for the egocentric velocity ",(0,o.yg)("inlineCode",{parentName:"p"},"world_anchored_robot_velocity_in_robot")," (robot is\nmoving forward with a speed of 5 mps)."))}d.isMDXComponent=!0}}]);