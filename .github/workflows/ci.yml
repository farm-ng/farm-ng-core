name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            compiler: gcc
            asan: off
          - os: ubuntu-20.04
            compiler: clang
            asan: off
          - os: ubuntu-20.04
            compiler: clang
            asan: on

      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: "recursive"
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
    - name: Install dependencies (Ubuntu)
      working-directory: ./scripts
      run: |
        ./install_deps_ubuntu.sh
      if: matrix.os == 'ubuntu-20.04'

    - name: Download dependencies (proto)
      run: |
        source ./bootstrap_venv.sh

    - name: Compile (gcc)
      run: |
          source venv/bin/activate
          ./scripts/compile_gcc.sh
      if: matrix.compiler == 'gcc'

    - name: Compile (clang)
      run: |
        clang -v
        source venv/bin/activate
        ./scripts/compile_clang.sh
      if: matrix.compiler == 'clang' && matrix.asan == 'off'


    - name: Compile (clang asan)
      run: |
        clang -v
        source venv/bin/activate
        ./scripts/compile_clang_asan.sh
      if: matrix.compiler == 'clang' && matrix.asan == 'on'
